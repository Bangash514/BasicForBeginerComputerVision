# -*- coding: utf-8 -*-
"""
Created on Tue Jul 15 09:05:13 2025

@author: Administrator
"""
#Ben Software Engineer


import cv2
import torch

# Load detectors
model = torch.hub.load('ultralytics/yolov5', 'yolov5s', pretrained=True)
model.conf = 0.35
model.iou  = 0.45

face_cascade = cv2.CascadeClassifier(
    cv2.data.haarcascades + 'haarcascade_frontalface_default.xml'
)

yolo_id_to_label = {
    0: 'human',
    41: 'cup',
    40: 'glass',
    39: 'bottle'
}
allowed_classes = set(yolo_id_to_label.keys())

cap = cv2.VideoCapture(0)
if not cap.isOpened():
    raise RuntimeError("Webcam not accessible")

try:
    while True:
        ret, frame = cap.read()
        if not ret:
            break

        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        faces = face_cascade.detectMultiScale(gray, 1.3, 5)
        for (x, y, w, h) in faces:
            cv2.rectangle(frame, (x, y), (x + w, y + h), (255, 0, 0), 2)
            cv2.putText(frame, 'human', (x, y - 10),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 0, 0), 2)

        results = model(cv2.cvtColor(frame, cv2.COLOR_BGR2RGB), size=640, augment=False)
        for det in results.xyxy[0]:
            x1, y1, x2, y2, conf, cls_id = det
            cls_id = int(cls_id.item())
            if cls_id not in allowed_classes:
                continue

            label = yolo_id_to_label[cls_id]
            conf_txt = f'{label} {conf:.2f}'

            cv2.rectangle(frame, (int(x1), int(y1)), (int(x2), int(y2)), (0, 255, 0), 2)
            cv2.putText(frame, conf_txt, (int(x1), int(y1) - 10),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 255, 0), 2)

        cv2.imshow('Webcam â€“ Face & Object Detection', frame)

        # Press ESC to exit
        if cv2.waitKey(1) & 0xFF == 27:
            break

except Exception as e:
    print("Error occurred:", e)

finally:
    cap.release()
    cv2.destroyAllWindows()
    print("Webcam and windows closed safely.")
