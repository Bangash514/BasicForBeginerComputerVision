import numpy as np
import matplotlib.pyplot as plt
from PIL import Image
import cv2

# Load the image
image_path = r"C:\Users\Administrator\Downloads\Kareena_Kapoor_at_TOIFA16.jpg"
image = Image.open(image_path)

# Convert to grayscale
gray_image = image.convert('L')

# Convert the grayscale image to a numpy array (required for OpenCV)
image_array = np.array(gray_image)

# Apply histogram equalization using OpenCV
equalized_image_array = cv2.equalizeHist(image_array)

# Convert the equalized image back to a PIL Image for further processing or display
equalized_image = Image.fromarray(equalized_image_array)

# Show original and equalized images side by side
fig, axes = plt.subplots(1, 2, figsize=(12, 6))
axes[0].imshow(gray_image, cmap='gray')
axes[0].set_title("Original Image")
axes[0].axis('off')

axes[1].imshow(equalized_image, cmap='gray')
axes[1].set_title("Equalized Image")
axes[1].axis('off')

plt.show()

# Save the equalized image
equalized_image.save(r"C:\Users\Administrator\Downloads\reference_images\Equalized_Image.jpg")

# Display histogram of original and equalized image for comparison
plt.figure(figsize=(10, 6))

# Plot histogram of the original image
plt.subplot(1, 2, 1)
plt.hist(image_array.flatten(), bins=256, range=[0, 256], color='gray')
plt.title("Original Histogram")
plt.xlabel("Pixel Intensity")
plt.ylabel("Frequency")

# Plot histogram of the equalized image
plt.subplot(1, 2, 2)
plt.hist(equalized_image_array.flatten(), bins=256, range=[0, 256], color='gray')
plt.title("Equalized Histogram")
plt.xlabel("Pixel Intensity")
plt.ylabel("Frequency")

plt.tight_layout()
plt.show()
