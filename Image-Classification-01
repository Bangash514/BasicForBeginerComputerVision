# -*- coding: utf-8 -*-
"""
Created on Tue Aug  5 10:16:48 2025

@author: Administrator
"""

import torch
import torchvision.transforms as transforms
from torchvision import models
from PIL import Image
import matplotlib.pyplot as plt

# Load image path
image_path = r"C:\Users\Administrator\Downloads\Kareena_Kapoor_at_TOIFA16.jpg"

# 1. Load the image using PIL
img = Image.open(image_path).convert('RGB')  # Convert to RGB

# 2. Define image transforms (resize, center crop, convert to tensor, normalize)
transform = transforms.Compose([
    transforms.Resize(256),
    transforms.CenterCrop(224),
    transforms.ToTensor(),  # Converts image to tensor [0,1]
    transforms.Normalize(                           # ImageNet normalization
        mean=[0.485, 0.456, 0.406], 
        std=[0.229, 0.224, 0.225]
    )
])

# Apply the transform
input_tensor = transform(img).unsqueeze(0)  # Add batch dimension (1, 3, 224, 224)

# 3. Load a pre-trained CNN model (ResNet18 for simplicity)
model = models.resnet18(pretrained=True)
model.eval()  # Set to evaluation mode

# 4. Make prediction
with torch.no_grad():
    output = model(input_tensor)
    _, predicted = torch.max(output, 1)

# 5. Load class labels (from ImageNet)
import json
import urllib.request

url = "https://raw.githubusercontent.com/pytorch/hub/master/imagenet_classes.txt"
class_names = urllib.request.urlopen(url).read().decode("utf-8").split("\n")

# 6. Show result
predicted_class = class_names[predicted.item()]
print(f"Predicted Class: {predicted_class}")

# 7. Show the image
plt.imshow(img)
plt.title(predicted_class)
plt.axis('off')
plt.show()
