# -*- coding: utf-8 -*-
"""
Created on Thu Jul 31 16:43:17 2025

@author: Administrator
"""
#Hereâ€™s how you can apply erosion, dilation, opening, and closing on the binary version of the image:

#Morphological operations
import cv2
import numpy as np
import matplotlib.pyplot as plt

# Image path
image_path = r"C:\Users\Administrator\Downloads\Kareena_Kapoor_at_TOIFA16.jpg"

# Load the image in grayscale
image = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)

# Check if the image is loaded correctly
if image is None:
    raise ValueError(f"Image not found at {image_path}")

# Display the original image
plt.figure(figsize=(8, 6))
plt.imshow(image, cmap='gray')
plt.title("Original Grayscale Image")
plt.axis('off')
plt.show()

# Step 1: Convert to binary image using thresholding
_, binary_image = cv2.threshold(image, 127, 255, cv2.THRESH_BINARY)

# Step 2: Structuring element (kernel) for morphological operations
kernel = np.ones((5, 5), np.uint8)

# Step 3: Apply Morphological Operations

# Erosion: Shrinks white regions (foreground)
erosion = cv2.erode(binary_image, kernel, iterations=1)

# Dilation: Expands white regions (foreground)
dilation = cv2.dilate(binary_image, kernel, iterations=1)

# Opening: Erosion followed by dilation (removes small noise)
opening = cv2.morphologyEx(binary_image, cv2.MORPH_OPEN, kernel)

# Closing: Dilation followed by erosion (fills small holes in the object)
closing = cv2.morphologyEx(binary_image, cv2.MORPH_CLOSE, kernel)

# Step 4: Display the results of all morphological operations
fig, axes = plt.subplots(1, 5, figsize=(20, 10))

# Display each result
axes[0].imshow(binary_image, cmap='gray')
axes[0].set_title("Original Binary Image")
axes[0].axis('off')

axes[1].imshow(erosion, cmap='gray')
axes[1].set_title("Erosion")
axes[1].axis('off')

axes[2].imshow(dilation, cmap='gray')
axes[2].set_title("Dilation")
axes[2].axis('off')

axes[3].imshow(opening, cmap='gray')
axes[3].set_title("Opening")
axes[3].axis('off')

axes[4].imshow(closing, cmap='gray')
axes[4].set_title("Closing")
axes[4].axis('off')

# Show all results
plt.tight_layout()
plt.show()
